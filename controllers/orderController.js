const Order = require("../models/Order");
const Product = require("../models/Product");
const User = require("../models/User");
const Notification = require("../models/Notification");
const { createNotification } = require("../controllers/notificationController");

// üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
const addToCart = async (req, res) => {
    try {
        const { productId, quantity } = req.body;

        // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô
        const product = await Product.findById(productId).populate("promotionId");
        if (!product) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });

        let cart = await Order.findOne({ userId: req.user.id, orderStatus: "cart" });
        if (!cart) cart = new Order({ userId: req.user.id, orderStatus: "cart", items: [] });

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        const existingItem = cart.items.find(item => item.productId.toString() === productId);
        const totalQuantityInCart = existingItem ? existingItem.quantity + quantity : quantity;

        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ + ‡πÉ‡∏´‡∏°‡πà **‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô `stockQuantity`**
        if (totalQuantityInCart > product.stockQuantity) {
            return res.status(400).json({ error: `‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${product.stockQuantity} ${product.unit || "‡∏´‡∏ô‡πà‡∏ß‡∏¢"})` });
        }

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        let discountedPrice = product.price;
        let validPromotion = null;
        const now = new Date();

        if (product.promotionId && now >= product.promotionId.startDate && now <= product.promotionId.endDate) {
            discountedPrice = product.price * (1 - product.promotionId.discountPercentage / 100);
            validPromotion = product.promotionId._id;
        }

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ `cart.items`
        if (existingItem) {
            existingItem.quantity += quantity;
            existingItem.discountedPrice = discountedPrice;
            existingItem.promotionId = validPromotion;
        } else {
            cart.items.push({ productId, quantity, price: product.price, discountedPrice, promotionId: validPromotion, unit: product.unit });
        }

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì `totalPrice`
        cart.totalPrice = cart.items.reduce((sum, item) => sum + item.discountedPrice * item.quantity, 0);
        await cart.save();

        res.status(200).json({ message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", cart });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// üìå ‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
const getCart = async (req, res) => {
    try {
        const cart = await Order.findOne({ userId: req.user.id, orderStatus: "cart" })
            .populate({
                path: "items.productId",
                select: "productName imageUrls price userId unit", // ‚úÖ Include unit
            })
            .populate("items.promotionId");

        if (!cart) {
            return res.status(200).json({ message: "üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤", items: [] });
        }

        res.status(200).json(cart);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// üìå ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
const removeFromCart = async (req, res) => {
    try {
        const { productId } = req.params;

        let cart = await Order.findOne({ userId: req.user.id, orderStatus: "cart" });
        if (!cart) return res.status(400).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        const itemIndex = cart.items.findIndex(item => item.productId.toString() === productId);
        if (itemIndex === -1) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤" });

        // ‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `cart.items`
        cart.items.splice(itemIndex, 1);

        if (cart.items.length === 0) {
            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö `cart` ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            await Order.findByIdAndDelete(cart._id);
            return res.status(200).json({ message: "üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
        }

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì `totalPrice` ‡πÉ‡∏´‡∏°‡πà
        cart.totalPrice = cart.items.reduce((sum, item) => sum + item.discountedPrice * item.quantity, 0);
        
        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        await cart.save();

        res.status(200).json({ message: "üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", cart });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// üìå ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (`cart` ‚Üí `pending`)
const confirmOrder = async (req, res) => {
    try {
        const { shippingAddress } = req.body;
        let cart = await Order.findOne({ userId: req.user.id, orderStatus: "cart" })
            .populate({
                path: "items.productId",
                select: "productName imageUrls price userId unit stockQuantity", // ‚úÖ Include unit
            });

        if (!cart || !cart.items || cart.items.length === 0) {
            return res.status(400).json({ error: "‚ùå ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" });
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        for (let item of cart.items) {
            let product = await Product.findById(item.productId);
            if (product) {
                if (item.quantity > product.stockQuantity) {
                    return res.status(400).json({ error: `‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${product.productName} ‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${product.stockQuantity} ${product.unit || "‡∏´‡∏ô‡πà‡∏ß‡∏¢"})` });
                }
                product.stockQuantity -= item.quantity;
                await product.save();
            }
        }

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        const sellerIds = [...new Set(
            cart.items.map(item => item.productId?.userId?.toString()).filter(Boolean)
        )];

        if (sellerIds.length === 0) {
            return res.status(400).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
        }

        // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô `orderStatus` ‡πÄ‡∏õ‡πá‡∏ô "pending"
        cart.orderStatus = "pending";
        cart.shippingAddress = shippingAddress;
        await cart.save();

        // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        for (const sellerId of sellerIds) {
            await createNotification(sellerId, `üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${cart._id} ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô`);
        }

        // ‚úÖ ‡πÉ‡∏ä‡πâ QR Code ‡∏à‡∏≤‡∏Å `promptPayQR` ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢
        let qrCodes = [];
        for (const sellerId of sellerIds) {
            const seller = await User.findById(sellerId);
            if (!seller || !seller.promptPayQR) continue;

            // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ `Seller`
            const sellerTotal = cart.items
                .filter(item => item.productId?.userId?.toString() === sellerId)
                .reduce((sum, item) => sum + ((item.discountedPrice || item.price) * item.quantity), 0);

            if (sellerTotal > 0) {
                qrCodes.push({ 
                    sellerId: seller._id, 
                    sellerName: seller.username, 
                    qrCodeUrl: seller.promptPayQR,
                    amount: sellerTotal.toFixed(2)
                });
            }
        }

        res.status(200).json({
            message: "‚úÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏° QR Code",
            orderId: cart._id,
            qrCodes
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// üìå ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
const confirmPayment = async (req, res) => {
    try {
        const { orderId, transactionId } = req.body;
        const paymentProof = req.file ? `/uploads/payments/${req.file.filename}` : null;

        let order = await Order.findById(orderId).populate({
            path: "items.productId",
            select: "productName price userId unit", // ‚úÖ Include unit
        });

        if (!order || order.orderStatus !== "pending") {
            return res.status(400).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ" });
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "waiting_confirm"
        order.orderStatus = "waiting_confirm";
        order.paymentProof = paymentProof;
        order.transactionId = transactionId;
        await order.save();

        // ‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        const sellerIds = [...new Set(order.items.map(item => item.productId?.userId?.toString()))];

        for (const sellerId of sellerIds) {
            await createNotification(sellerId, `üí∞ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${order._id} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö`);
        }

        res.status(200).json({ 
            message: "‚úÖ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢", 
            order 
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// üìå ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
const approvePayment = async (req, res) => {
    try {
        const { orderId } = req.body;
        let order = await Order.findById(orderId).populate({
            path: "items.productId",
            select: "productName price userId unit", // ‚úÖ Include unit
        });

        if (!order || order.orderStatus !== "waiting_confirm") {
            return res.status(400).json({ error: "‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ" });
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
        const sellerItems = order.items.filter(item => item.productId.userId.toString() === req.user.id);
        if (sellerItems.length === 0) {
            return res.status(403).json({ error: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ" });
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        order.orderStatus = "confirmed";
        await order.save();

        // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        await createNotification(order.userId, `üí∞ ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${order._id} ‡πÅ‡∏•‡πâ‡∏ß`);

        res.status(200).json({ 
            message: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
            order 
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// üìå ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
const getAllOrders = async (req, res) => {
    try {
        if (req.user.role !== "admin") {
            return res.status(403).json({ error: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ" });
        }

        if (req.params.orderId) {
            const order = await Order.findById(req.params.orderId)
                .populate("userId", "username")
                .populate({
                    path: "items.productId",
                    select: "productName userId price unit", // ‚úÖ Include unit
                });
            
            if (!order) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" });

            return res.status(200).json(order);
        }

        const orders = await Order.find()
            .populate("userId", "username")
            .populate({
                path: "items.productId",
                select: "productName userId price unit", // ‚úÖ Include unit
            });

        res.status(200).json(orders);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// üìå ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Seller)
const getSellerOrders = async (req, res) => {
    try {
        if (req.user.role !== "seller") {
            return res.status(403).json({ error: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ" });
        }

        if (req.params.orderId) {
            const order = await Order.findById(req.params.orderId)
                .populate("userId", "username")
                .populate({
                    path: "items.productId",
                    select: "productName price userId unit", // ‚úÖ Include unit
                    match: { userId: req.user.id }
                });

            if (!order || !order.items.some(item => item.productId !== null)) {
                return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" });
            }

            return res.status(200).json(order);
        }

        const orders = await Order.find({ "items.productId": { $exists: true } })
            .populate("userId", "username")
            .populate({
                path: "items.productId",
                select: "productName price userId unit", // ‚úÖ Include unit
                match: { userId: req.user.id }
            });

        const filteredOrders = orders.map(order => ({
            ...order.toObject(),
            items: order.items.filter(item => item.productId !== null)
        })).filter(order => order.items.length > 0);

        res.status(200).json(filteredOrders);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

module.exports = {
    addToCart,
    getCart,
    removeFromCart,
    confirmOrder,
    confirmPayment,
    approvePayment,
    getAllOrders,
    getSellerOrders,
};