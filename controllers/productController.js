const Product = require("../models/Product");
const Category = require("../models/Category");
const Promotion = require("../models/Promotion");
const { v4: uuidv4 } = require("uuid");

// üìå Add a product
const addProduct = async (req, res) => {
  try {
    const { categoryId, productName, productCode, description, price, stockQuantity, grades, units } = req.body;
    const imageUrls = req.files ? req.files.map((file) => `/uploads/${file.filename}`) : [];

    if (req.user.role !== "seller") {
      return res.status(403).json({ error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    const categoryExists = await Category.findById(categoryId);
    if (!categoryExists) {
      return res.status(400).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Category ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    const finalProductCode = productCode || uuidv4();

    const newProduct = new Product({
      productCode: finalProductCode,
      categoryId,
      userId: req.user.id,
      productName,
      description,
      price,
      stockQuantity,
      grades: grades || ["A+", "B+", "C+", "D+"], // Default grades if not provided
      units: units || ["‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°", "‡∏ï‡∏±‡∏ô"], // Default units if not provided
      imageUrls,
      sold: 0, // Initialize sold
    });

    await newProduct.save();
    res.status(201).json({ message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", product: newProduct });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìå Get all products
const getAllProducts = async (req, res) => {
  try {
    const products = await Product.find()
      .populate("categoryId", "name")
      .populate("promotionId", "promotionName discountPercentage startDate endDate isActive")
      .populate("userId", "username role");
    res.status(200).json(products);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìå Get product by ID
const getProductById = async (req, res) => {
  try {
    const { id } = req.params;

    const product = await Product.findById(id)
      .populate("categoryId", "name")
      .populate("promotionId", "promotionName discountPercentage startDate endDate isActive")
      .populate("userId", "username role")
      .populate("reviews.userId", "username");

    if (!product) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });

    res.status(200).json(product);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìå Get popular products
const getPopularProducts = async (req, res) => {
  try {
    const { limit = 5, categoryId } = req.query;
    const query = categoryId ? { categoryId } : {};

    const products = await Product.aggregate([
      { $match: query },
      {
        $addFields: {
          averageRating: { $avg: "$reviews.rating" },
        },
      },
      { $sort: { averageRating: -1, createdAt: -1 } },
      // Ensure uniqueness by productCode
      {
        $group: {
          _id: "$productCode",
          doc: { $first: "$$ROOT" },
        },
      },
      {
        $replaceRoot: { newRoot: "$doc" },
      },
      { $limit: parseInt(limit) },
      {
        $lookup: {
          from: "promotions",
          localField: "promotionId",
          foreignField: "_id",
          as: "promotionId",
        },
      },
      { $unwind: { path: "$promotionId", preserveNullAndEmptyArrays: true } },
      {
        $project: {
          productCode: 1,
          productName: 1,
          price: 1,
          stockQuantity: 1,
          imageUrls: 1,
          sold: 1,
          grades: 1,
          units: 1,
          promotionId: {
            promotionName: 1,
            discountPercentage: 1,
            startDate: 1,
            endDate: 1,
            isActive: 1,
          },
        },
      },
    ]);

    res.status(200).json(products);
  } catch (err) {
    console.error('Error fetching popular products:', err);
    res.status(500).json({ error: "Server error", data: [] });
  }
};

// üìå Get promotional products
const getPromotionalProducts = async (req, res) => {
  try {
    const { limit = 5 } = req.query;
    const now = new Date();

    const products = await Product.aggregate([
      {
        $lookup: {
          from: "promotions",
          localField: "promotionId",
          foreignField: "_id",
          as: "promotionId",
        },
      },
      { $unwind: { path: "$promotionId", preserveNullAndEmptyArrays: false } },
      {
        $match: {
          "promotionId.isActive": true,
          "promotionId.startDate": { $lte: now },
          "promotionId.endDate": { $gte: now },
        },
      },
      { $limit: parseInt(limit) },
      {
        $project: {
          productCode: 1,
          productName: 1,
          price: 1,
          stockQuantity: 1,
          imageUrls: 1,
          sold: 1,
          grades: 1,
          units: 1,
          promotionId: {
            promotionName: 1,
            discountPercentage: 1,
            startDate: 1,
            endDate: 1,
            isActive: 1,
          },
        },
      },
    ]);

    res.status(200).json(products);
  } catch (err) {
    console.error('Error fetching promotional products:', err);
    res.status(500).json({ error: "Server error", data: [] });
  }
};

// üìå Update product
const updateProduct = async (req, res) => {
  try {
    const { id } = req.params;
    const { productName, description, price, stockQuantity, unit, grades, units, categoryId } = req.body;
    const newImageUrls = req.files ? req.files.map((file) => `/uploads/${file.filename}`) : [];

    const product = await Product.findById(id);
    if (!product) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });

    if (req.user.role !== "seller" || product.userId.toString() !== req.user.id) {
      return res.status(403).json({ error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ" });
    }

    const updates = {
      productName: productName || product.productName,
      description: description || product.description,
      price: price || product.price,
      stockQuantity: stockQuantity || product.stockQuantity,
      unit: unit || product.unit,
      grades: grades || product.grades,
      units: units || product.units,
      categoryId: categoryId || product.categoryId,
      imageUrls: newImageUrls.length > 0 ? newImageUrls : product.imageUrls,
    };

    const updatedProduct = await Product.findByIdAndUpdate(id, updates, { new: true });

    res.status(200).json({ message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", product: updatedProduct });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìå Delete product
const deleteProduct = async (req, res) => {
  try {
    const { id } = req.params;

    const product = await Product.findById(id);
    if (!product) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });

    if (req.user.role !== "seller" || product.userId.toString() !== req.user.id) {
      return res.status(403).json({ error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ" });
    }

    await Product.findByIdAndDelete(id);
    res.status(200).json({ message: "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìå Add promotion to product
const addPromotionToProduct = async (req, res) => {
  try {
    const { productId } = req.params;
    const { promotionName, description, discountPercentage, startDate, endDate } = req.body;

    if (!promotionName || !discountPercentage || !startDate || !endDate) {
      return res.status(400).json({ error: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    const product = await Product.findById(productId);
    if (!product) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });

    if (req.user.role !== "seller" || product.userId.toString() !== req.user.id) {
      return res.status(403).json({ error: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ" });
    }

    const existingPromotion = await Promotion.findById(product.promotionId);
    if (existingPromotion) {
      return res.status(400).json({ error: "‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });
    }

    const promotion = new Promotion({
      promotionName,
      description,
      discountPercentage,
      startDate,
      endDate,
    });

    await promotion.save();

    product.promotionId = promotion._id;
    await product.save();

    res.status(200).json({ message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", product, promotion });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìå Update promotion
const updatePromotionOfProduct = async (req, res) => {
  try {
    const { productId } = req.params;
    const { promotionName, description, discountPercentage, startDate, endDate } = req.body;

    if (!promotionName || !discountPercentage || !startDate || !endDate) {
      return res.status(400).json({ error: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    const product = await Product.findById(productId);
    if (!product) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });

    if (req.user.role !== "seller" || product.userId.toString() !== req.user.id) {
      return res.status(403).json({ error: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ" });
    }

    const promotion = await Promotion.findById(product.promotionId);
    if (!promotion) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ" });

    promotion.promotionName = promotionName;
    promotion.description = description;
    promotion.discountPercentage = discountPercentage;
    promotion.startDate = startDate;
    promotion.endDate = endDate;
    await promotion.save();

    res.status(200).json({ message: "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", promotion });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìå Remove promotion
const removePromotionFromProduct = async (req, res) => {
  try {
    const { productId } = req.params;

    const product = await Product.findById(productId);
    if (!product) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });

    if (req.user.role !== "seller" || product.userId.toString() !== req.user.id) {
      return res.status(403).json({ error: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô" });
    }

    const promotion = await Promotion.findById(product.promotionId);
    if (!promotion) return res.status(404).json({ error: "‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô" });

    product.promotionId = null;
    await product.save();
    await Promotion.findByIdAndDelete(promotion._id);

    res.status(200).json({ message: "‚úÖ ‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", product });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìå Add review
const addReviewToProduct = async (req, res) => {
  try {
    const { productId } = req.params;
    const { rating, comment } = req.body;

    if (!rating) {
      return res.status(400).json({ error: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (rating)" });
    }

    const product = await Product.findById(productId);
    if (!product) {
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    const review = {
      userId: req.user.id,
      rating,
      comment,
    };

    product.reviews.push(review);
    await product.save();

    res.status(201).json({ message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", reviews: product.reviews });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìå Update review
const updateReviewOnProduct = async (req, res) => {
  try {
    const { productId, reviewId } = req.params;
    const { rating, comment } = req.body;

    const product = await Product.findById(productId);
    if (!product) {
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    const review = product.reviews.find((rev) => rev._id.toString() === reviewId);
    if (!review) {
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" });
    }

    if (review.userId.toString() !== req.user.id) {
      return res.status(403).json({ error: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ô‡∏µ‡πâ" });
    }

    if (rating !== undefined) review.rating = rating;
    if (comment !== undefined) review.comment = comment;

    await product.save();

    res.status(200).json({ message: "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", review });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìå Get reviews
const getReviewsFromProduct = async (req, res) => {
  try {
    const { productId } = req.params;

    const product = await Product.findById(productId).populate("reviews.userId", "username");
    if (!product) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    res.status(200).json(product.reviews);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// üìå Delete review
const deleteReviewFromProduct = async (req, res) => {
  try {
    const { productId, reviewId } = req.params;

    const product = await Product.findById(productId);
    if (!product) {
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    if (!product.reviews || product.reviews.length === 0) {
      return res.status(404).json({ error: "‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß" });
    }

    const review = product.reviews.find((rev) => rev._id.toString() === reviewId);
    if (!review) {
      return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß" });
    }

    if (!review.userId || review.userId.toString() !== req.user.id) {
      return res.status(403).json({ error: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô" });
    }

    product.reviews = product.reviews.filter((rev) => rev._id.toString() !== reviewId);
    await product.save();

    res.status(200).json({ message: "‚úÖ ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", reviews: product.reviews });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

module.exports = {
  addProduct,
  getAllProducts,
  getProductById,
  getPopularProducts,
  getPromotionalProducts,
  updateProduct,
  deleteProduct,
  addPromotionToProduct,
  updatePromotionOfProduct,
  removePromotionFromProduct,
  addReviewToProduct,
  updateReviewOnProduct,
  getReviewsFromProduct,
  deleteReviewFromProduct,
};